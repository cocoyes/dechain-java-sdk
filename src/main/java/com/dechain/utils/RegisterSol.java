package com.dechain.utils;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class RegisterSol extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETNFTINFO = "getNFTInfo";

    public static final String FUNC_LOCKTOKEN = "lockToken";

    public static final String FUNC_CHANGETOKENSORT = "changeTokenSort";

    public static final String FUNC_GETTOKENINFO = "getTokenInfo";

    public static final String FUNC_GETTOKENLIST = "getTokenList";

    public static final String FUNC_CREATENFT = "createNFT";

    public static final String FUNC_NFTMARKETS = "nftMarkets";

    public static final String FUNC_GETNFTLIST = "getNFTList";

    public static final String FUNC_GETREDMAP = "getRedMap";

    public static final String FUNC_TOKENS = "tokens";

    public static final String FUNC_UPDATETOKENICON = "updateTokenIcon";

    public static final String FUNC_SYMBOLTOKENINFO = "symbolTokenInfo";

    public static final String FUNC_ADDTOKEN = "addToken";

    public static final String FUNC_MAPPERPAYCONTRACT = "mapperPayContract";

    public static final String FUNC_NFTTOKENMAP = "nftTokenMap";

    public static final String FUNC_REGISTERTOKENFEE = "registerTokenFee";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_UPDATENFTUSED = "updateNFTUsed";

    public static final String FUNC_GETBASEINFO = "getBaseInfo";

    public static final String FUNC_TOKENADDRESS = "tokenAddress";

    public static final String FUNC_UNLOCKTOKEN = "unlockToken";

    public static final String FUNC_REGISTERREDFEE = "registerRedFee";

    public static final String FUNC_CREATETOKEN = "createToken";

    public static final String FUNC_REGISTERPAYFEE = "registerPayFee";

    public static final String FUNC_CHANGEFEE = "changeFee";

    public static final String FUNC_PAYTOKENMAP = "payTokenMap";

    public static final String FUNC_GETPAYMAP = "getPayMap";

    public static final String FUNC_UPDATETOKENSYMBOL = "updateTokenSymbol";

    public static final String FUNC_CHANGETOKENCTYPE = "changeTokenCtype";

    public static final String FUNC_NFTPUBLISHFEE = "nftPublishFee";

    public static final String FUNC_UPDATETOKENNAME = "updateTokenName";

    public static final String FUNC_WITHDRAWBALANCE = "withdrawBalance";

    public static final String FUNC_MAPPERREDCONTRACT = "mapperRedContract";

    public static final String FUNC_UPDATETOKENSORT = "updateTokenSort";

    public static final String FUNC_TOKENINFO = "tokenInfo";

    public static final String FUNC_REDPACKTOKENMAP = "redPackTokenMap";

    public static final String FUNC_ADDORCHANGENFT = "addOrChangeNFT";

    @Deprecated
    protected RegisterSol(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RegisterSol(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RegisterSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RegisterSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, Boolean>> getNFTInfo(String _addr) {
        final Function function = new Function(FUNC_GETNFTINFO, 
                Arrays.<Type>asList(new Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, Boolean>>(
                new Callable<Tuple6<String, String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> lockToken(String _token) {
        final Function function = new Function(
                FUNC_LOCKTOKEN, 
                Arrays.<Type>asList(new Address(_token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeTokenSort(String _token, BigInteger _sort) {
        final Function function = new Function(
                FUNC_CHANGETOKENSORT, 
                Arrays.<Type>asList(new Address(_token), 
                new Uint256(_sort)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple11<String, String, String, String, BigInteger, String, BigInteger, Boolean, String, String, BigInteger>> getTokenInfo(String _addr) {
        final Function function = new Function(FUNC_GETTOKENINFO, 
                Arrays.<Type>asList(new Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple11<String, String, String, String, BigInteger, String, BigInteger, Boolean, String, String, BigInteger>>(
                new Callable<Tuple11<String, String, String, String, BigInteger, String, BigInteger, Boolean, String, String, BigInteger>>() {
                    @Override
                    public Tuple11<String, String, String, String, BigInteger, String, BigInteger, Boolean, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<String, String, String, String, BigInteger, String, BigInteger, Boolean, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteCall<List> getTokenList() {
        final Function function = new Function(FUNC_GETTOKENLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createNFT(String _contractAddr, String _img, String _title, String _content, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(_contractAddr), 
                new Utf8String(_img), 
                new Utf8String(_title), 
                new Utf8String(_content)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> nftMarkets(BigInteger param0) {
        final Function function = new Function(FUNC_NFTMARKETS, 
                Arrays.<Type>asList(new Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getNFTList() {
        final Function function = new Function(FUNC_GETNFTLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getRedMap(String _addr) {
        final Function function = new Function(FUNC_GETREDMAP, 
                Arrays.<Type>asList(new Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>> tokens(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENS, 
                Arrays.<Type>asList(new Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>(
                new Callable<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>() {
                    @Override
                    public Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (String) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateTokenIcon(List<String> _addrs, List<String> icons, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPDATETOKENICON, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)), 
                new DynamicArray<Utf8String>(
                        org.web3j.abi.Utils.typeMap(icons, Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>> symbolTokenInfo(String param0) {
        final Function function = new Function(FUNC_SYMBOLTOKENINFO, 
                Arrays.<Type>asList(new Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>(
                new Callable<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>() {
                    @Override
                    public Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (String) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addToken(String _token, String _symbol, String _icon, String _tokenName, BigInteger _len, BigInteger _red, BigInteger _pay, String _raddr, String _paddr, BigInteger _ctype, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDTOKEN, 
                Arrays.<Type>asList(new Address(_token), 
                new Utf8String(_symbol), 
                new Utf8String(_icon), 
                new Utf8String(_tokenName), 
                new Uint256(_len), 
                new Uint256(_red), 
                new Uint256(_pay), 
                new Address(_raddr), 
                new Address(_paddr), 
                new Uint256(_ctype)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> mapperPayContract(String _payAddr, String _tokenAddr, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAPPERPAYCONTRACT, 
                Arrays.<Type>asList(new Address(_payAddr), 
                new Address(_tokenAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, Boolean>> nftTokenMap(String param0) {
        final Function function = new Function(FUNC_NFTTOKENMAP, 
                Arrays.<Type>asList(new Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, Boolean>>(
                new Callable<Tuple6<String, String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> registerTokenFee() {
        final Function function = new Function(FUNC_REGISTERTOKENFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateNFTUsed(String _nftAddr, Boolean _state) {
        final Function function = new Function(
                FUNC_UPDATENFTUSED, 
                Arrays.<Type>asList(new Address(_nftAddr), 
                new Bool(_state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getBaseInfo() {
        final Function function = new Function(FUNC_GETBASEINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> tokenAddress(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENADDRESS, 
                Arrays.<Type>asList(new Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> unlockToken(String _token) {
        final Function function = new Function(
                FUNC_UNLOCKTOKEN, 
                Arrays.<Type>asList(new Address(_token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> registerRedFee() {
        final Function function = new Function(FUNC_REGISTERREDFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createToken(String _token, String _symbol, String _icon, String _tokenName, BigInteger _len, BigInteger _ctype, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CREATETOKEN, 
                Arrays.<Type>asList(new Address(_token), 
                new Utf8String(_symbol), 
                new Utf8String(_icon), 
                new Utf8String(_tokenName), 
                new Uint256(_len), 
                new Uint256(_ctype)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> registerPayFee() {
        final Function function = new Function(FUNC_REGISTERPAYFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeFee(BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        final Function function = new Function(
                FUNC_CHANGEFEE, 
                Arrays.<Type>asList(new Uint256(_registerTokenFee), 
                new Uint256(_registerRedFee), 
                new Uint256(_registerPayFee), 
                new Uint256(_nftPublishFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> payTokenMap(String param0) {
        final Function function = new Function(FUNC_PAYTOKENMAP, 
                Arrays.<Type>asList(new Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getPayMap(String _addr) {
        final Function function = new Function(FUNC_GETPAYMAP, 
                Arrays.<Type>asList(new Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateTokenSymbol(List<String> _addrs, List<String> symbols, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPDATETOKENSYMBOL, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)), 
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(symbols, Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> changeTokenCtype(String _token, BigInteger _ctype) {
        final Function function = new Function(
                FUNC_CHANGETOKENCTYPE, 
                Arrays.<Type>asList(new Address(_token), 
                new Uint256(_ctype)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> nftPublishFee() {
        final Function function = new Function(FUNC_NFTPUBLISHFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateTokenName(List<String> _addrs, List<String> names, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPDATETOKENNAME, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)), 
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(names, Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawBalance(BigInteger amount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAWBALANCE, 
                Arrays.<Type>asList(new Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> mapperRedContract(String _redAddr, String _tokenAddr, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAPPERREDCONTRACT, 
                Arrays.<Type>asList(new Address(_redAddr), 
                new Address(_tokenAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> updateTokenSort(List<String> _addrs, List<BigInteger> sorts, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPDATETOKENSORT, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)), 
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(sorts, Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>> tokenInfo(String param0) {
        final Function function = new Function(FUNC_TOKENINFO, 
                Arrays.<Type>asList(new Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>(
                new Callable<Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>>() {
                    @Override
                    public Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<String, String, String, String, BigInteger, String, Boolean, BigInteger, Boolean, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (String) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<String> redPackTokenMap(String param0) {
        final Function function = new Function(FUNC_REDPACKTOKENMAP, 
                Arrays.<Type>asList(new Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addOrChangeNFT(String _contractAddr, String _img, String _title, String _content, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDORCHANGENFT, 
                Arrays.<Type>asList(new Address(_contractAddr), 
                new Utf8String(_img), 
                new Utf8String(_title), 
                new Utf8String(_content)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static RegisterSol load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RegisterSol(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RegisterSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RegisterSol(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RegisterSol load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RegisterSol(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RegisterSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RegisterSol(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RegisterSol> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee), 
                new Uint256(_registerRedFee), 
                new Uint256(_registerPayFee), 
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterSol.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<RegisterSol> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee), 
                new Uint256(_registerRedFee), 
                new Uint256(_registerPayFee), 
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterSol.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RegisterSol> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee), 
                new Uint256(_registerRedFee), 
                new Uint256(_registerPayFee), 
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterSol.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RegisterSol> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee), 
                new Uint256(_registerRedFee), 
                new Uint256(_registerPayFee), 
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterSol.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
