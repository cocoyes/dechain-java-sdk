package com.dechain.utils;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class RedpackSol extends Contract {
    private static final String BINARY = "6080604052670de0b6b3a764000060015569021e19e0c9bab240000060025560016003556127106004556000600555600060065534801561003f57600080fd5b5060405160208061253b8339810180604052602081101561005f57600080fd5b5051600080546001600160a01b03199081163317909155600880546001600160a01b039093169290911691909117905561249d8061009e6000396000f3fe60806040526004361061011f5760003560e01c8063abb1dc44116100a0578063e9e88dc311610064578063e9e88dc31461058e578063f71d96cb1461063f578063fd1e5b1614610669578063fd6572dd14610739578063fd9ba834146108985761011f565b8063abb1dc441461032a578063ae361e481461043d578063d1df81df146104ed578063e068585614610564578063e864fb7c146105795761011f565b80635eab74fc116100e75780635eab74fc146102a55780636f4bda17146102d65780638645bdb7146102eb5780638da5cb5b1461030057806395d89b41146103155761011f565b806306fdde0314610124578063313ce567146101ae5780633e5a104b146101d55780634e40aa88146101ea5780635024136a146101ff575b600080fd5b34801561013057600080fd5b506101396108ad565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ba57600080fd5b506101c3610981565b60408051918252519081900360200190f35b3480156101e157600080fd5b506101c36109fd565b3480156101f657600080fd5b506101c3610a03565b6102a36004803603602081101561021557600080fd5b810190602081018135600160201b81111561022f57600080fd5b82018360208201111561024157600080fd5b803590602001918460018302840111600160201b8311171561026257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a09945050505050565b005b3480156102b157600080fd5b506102ba6111d2565b604080516001600160a01b039092168252519081900360200190f35b3480156102e257600080fd5b506101c36111e1565b3480156102f757600080fd5b506101c36111e7565b34801561030c57600080fd5b506102ba6111f5565b34801561032157600080fd5b50610139611204565b34801561033657600080fd5b5061033f61124c565b60405180858152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561039e578181015183820152602001610386565b50505050905090810190601f1680156103cb5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156103fe5781810151838201526020016103e6565b50505050905090810190601f16801561042b5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6102a36004803603606081101561045357600080fd5b813591602081013591810190606081016040820135600160201b81111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460018302840111600160201b831117156104ac57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061147e945050505050565b3480156104f957600080fd5b50610502611914565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561054e578181015183820152602001610536565b5050505090500194505050505060405180910390f35b34801561057057600080fd5b506101c3611988565b34801561058557600080fd5b506101c361198e565b34801561059a57600080fd5b506102a3600480360360208110156105b157600080fd5b810190602081018135600160201b8111156105cb57600080fd5b8201836020820111156105dd57600080fd5b803590602001918460018302840111600160201b831117156105fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611994945050505050565b34801561064b57600080fd5b506102ba6004803603602081101561066257600080fd5b5035611e28565b34801561067557600080fd5b506107256004803603604081101561068c57600080fd5b810190602081018135600160201b8111156106a657600080fd5b8201836020820111156106b857600080fd5b803590602001918460018302840111600160201b831117156106d957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b03169150611e4f9050565b604080519115158252519081900360200190f35b34801561074557600080fd5b506107ea6004803603602081101561075c57600080fd5b810190602081018135600160201b81111561077657600080fd5b82018360208201111561078857600080fd5b803590602001918460018302840111600160201b831117156107a957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611f72945050505050565b604051808681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610840578181015183820152602001610828565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561087f578181015183820152602001610867565b5050505090500197505050505050505060405180910390f35b3480156108a457600080fd5b506101c361212a565b60085460408051600160e01b6306fdde0302815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561093257600080fd5b810190808051600160201b81111561094957600080fd5b8201602081018481111561095c57600080fd5b8151600160201b81118282018710171561097557600080fd5b50909450505050505b90565b60085460408051600160e01b63313ce56702815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156109c957600080fd5b505afa1580156109dd573d6000803e3d6000fd5b505050506040513d60208110156109f357600080fd5b505160ff16905090565b60025481565b60015481565b60006009826040518082805190602001908083835b60208310610a3d5780518252601f199092019160209182019101610a1e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003015411610ac95760408051600160e51b62461bcd02815260206004820152601060248201527f7265647061636b20697320656d70747900000000000000000000000000000000604482015290519081900360640190fd5b6009816040518082805190602001908083835b60208310610afb5780518252601f199092019160209182019101610adc565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600601548551909460099450869350918291908401908083835b60208310610b5f5780518252601f199092019160209182019101610b40565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004015411610beb5760408051600160e51b62461bcd02815260206004820152601960248201527f657863656564206e756d626572206f66207265647061636b7300000000000000604482015290519081900360640190fd5b610bf58133611e4f565b15610c4a5760408051600160e51b62461bcd02815260206004820152600f60248201527f616c726561647920677261626265640000000000000000000000000000000000604482015290519081900360640190fd5b6060336009836040518082805190602001908083835b60208310610c7f5780518252601f199092019160209182019101610c60565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520600301546001600160a01b03969096168583015284810195909552426060850152436080808601919091528551808603909101815260a090940194859052865193955060009485946009945088935090918291908401908083835b60208310610d255780518252601f199092019160209182019101610d06565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320600301548651938701939093209150829050610d6957fe5b06905060006009856040518082805190602001908083835b60208310610da05780518252601f199092019160209182019101610d81565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810184206006015489519094600994508a9350918291908401908083835b60208310610e045780518252601f199092019160209182019101610de5565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600401548a51959003946009948b9450925082918401908083835b60208310610e695780518252601f199092019160209182019101610e4a565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600301549150829050610ea357fe5b04905081610eb45760019250610ec8565b80821115610ec457809250610ec8565b8192505b6009856040518082805190602001908083835b60208310610efa5780518252601f199092019160209182019101610edb565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600601548951600190910194600994508a9350918291908401908083835b60208310610f625780518252601f199092019160209182019101610f43565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401541415611005576009856040518082805190602001908083835b60208310610fd15780518252601f199092019160209182019101610fb2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060030154945050505b826009866040518082805190602001908083835b602083106110385780518252601f199092019160209182019101611019565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160016009886040518082805190602001908083835b602083106110a25780518252601f199092019160209182019101611083565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600601548c519094600994508d9350918291908401908083835b602083106111065780518252601f1990920191602091820191016110e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004015403038154811061114957fe5b60009182526020909120015561115f8584612130565b826009866040518082805190602001908083835b602083106111925780518252601f199092019160209182019101611173565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060030180549390930390925550505050505050565b6008546001600160a01b031681565b60065481565b69152d02c7e14af680000081565b6000546001600160a01b031681565b60085460408051600160e01b6395d89b4102815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b1580156108f557600080fd5b600080606080600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a057600080fd5b505afa1580156112b4573d6000803e3d6000fd5b505050506040513d60208110156112ca57600080fd5b505160085460408051600160e01b6306fdde0302815290516001600160a01b039092169182916306fdde03916004808301926000929190829003018186803b15801561131557600080fd5b505afa158015611329573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561135257600080fd5b810190808051600160201b81111561136957600080fd5b8201602081018481111561137c57600080fd5b8151600160201b81118282018710171561139557600080fd5b505060085460408051600160e01b6395d89b4102815290519295506001600160a01b0390911693506395d89b419250600480820192600092909190829003018186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561142157600080fd5b810190808051600160201b81111561143857600080fd5b8201602081018481111561144b57600080fd5b8151600160201b81118282018710171561146457600080fd5b505060ff969096169a949950929750939550919350505050565b6009816040518082805190602001908083835b602083106114b05780518252601f199092019160209182019101611491565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206008015460ff161591506114f0905057600080fd5b816009826040518082805190602001908083835b602083106115235780518252601f199092019160209182019101611504565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842060020194909455505082518492600992859290918291908401908083835b6020831061158b5780518252601f19909201916020918201910161156c565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842060030194909455505082518592600992859290918291908401908083835b602083106115f35780518252601f1990920191602091820191016115d4565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842060040194909455505082518392600992849290918291908401908083835b6020831061165b5780518252601f19909201916020918201910161163c565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161169c959194919091019250905061239f565b50826040519080825280602002602001820160405280156116c7578160200160208202803883390190505b506009826040518082805190602001908083835b602083106116fa5780518252601f1990920191602091820191016116db565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161173f95600590920194919091019250905061241d565b50600580548301905560068054600190810190915560078054918201815560009081527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890910180546001600160a01b0319163390811790915560085460408051600160e01b6323b872dd028152600481019390935230602484015260448301869052516001600160a01b0391909116926323b872dd926064808201939182900301818387803b1580156117f257600080fd5b505af1158015611806573d6000803e3d6000fd5b5050505060016009826040518082805190602001908083835b6020831061183e5780518252601f19909201916020918201910161181f565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520600801805460ff19169615159690961790955580845285518482015285517f312a96a6b31705364f7cc9dff187aaf6bd3a835e164c7e9a3f865a14b5f00e4b958795945084935083019185019080838360005b838110156118d55781810151838201526020016118bd565b50505050905090810190601f1680156119025780820380516001836020036101000a031916815260200191505b509250505060405180910390a1505050565b600080606060055460065460078080548060200260200160405190810160405280929190818152602001828054801561197657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611958575b50505050509050925092509250909192565b60055481565b60035481565b6009816040518082805190602001908083835b602083106119c65780518252601f1990920191602091820191016119a7565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600101546001600160a01b031633149150611a5890505760408051600160e51b62461bcd02815260206004820152600e60248201527f6e6f7420746865206f776e65722e000000000000000000000000000000000000604482015290519081900360640190fd5b60006009826040518082805190602001908083835b60208310611a8c5780518252601f199092019160209182019101611a6d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003015411611b185760408051600160e51b62461bcd02815260206004820152600d60248201527f62616c616e636520697320302e00000000000000000000000000000000000000604482015290519081900360640190fd5b6005546009826040518082805190602001908083835b60208310611b4d5780518252601f199092019160209182019101611b2e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301541115611bda5760408051600160e51b62461bcd02815260206004820152601260248201527f6e6f7420656e6f756768206275646765742e0000000000000000000000000000604482015290519081900360640190fd5b60085460405182516001600160a01b039092169163a9059cbb9133916009918691819060208401908083835b60208310611c255780518252601f199092019160209182019101611c06565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900390910184206003015463ffffffff871660e01b85526001600160a01b03959095166004850152602484019490945250509051604480830192600092919082900301818387803b158015611c9f57600080fd5b505af1158015611cb3573d6000803e3d6000fd5b505050506009816040518082805190602001908083835b60208310611ce95780518252601f199092019160209182019101611cca565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600301546005805491909103905584517f3e3c9d55a08ffec55ddd848674ef956fbe71220c8c619c036a696dde1f2f262b94869450600993508492909182918401908083835b60208310611d795780518252601f199092019160209182019101611d5a565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852060030154858301819052818652865191860191909152855190949350839250606083019186019080838360005b83811015611dea578181015183820152602001611dd2565b50505050905090810190601f168015611e175780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b60078181548110611e3557fe5b6000918252602090912001546001600160a01b0316905081565b6000805b6009846040518082805190602001908083835b60208310611e855780518252601f199092019160209182019101611e66565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600601548310159150611f66905057826001600160a01b03166009856040518082805190602001908083835b60208310611efb5780518252601f199092019160209182019101611edc565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060060180549092508491508110611f3957fe5b6000918252602090912001546001600160a01b03161415611f5e576001915050611f6c565b600101611e53565b50600090505b92915050565b600080600060608060006009876040518082805190602001908083835b60208310611fae5780518252601f199092019160209182019101611f8f565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852060068101548087528084028701909301909152945060609392509050801561200c578160200160208202803883390190505b50905060608260060180549050604051908082528060200260200182016040528015612042578160200160208202803883390190505b50905060005b60068401548110156121085783600601818154811061206357fe5b9060005260206000200160009054906101000a90046001600160a01b031683828151811061208d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508360070160008560060183815481106120c257fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205482518390839081106120f557fe5b6020908102919091010152600101612048565b5060028301546003840154600490940154909a93995097509095509350915050565b60045481565b60055481111561218a5760408051600160e51b62461bcd02815260206004820152601860248201527f677261623a206e6f7420656e6f756768206275646765742e0000000000000000604482015290519081900360640190fd5b60085460408051600160e01b63a9059cbb0281523360048201526024810184905290516001600160a01b039092169163a9059cbb9160448082019260009290919082900301818387803b1580156121e057600080fd5b505af11580156121f4573d6000803e3d6000fd5b5050600580548490039055505060405182516009918491819060208401908083835b602083106122355780518252601f199092019160209182019101612216565b51815160001960209485036101000a01908116901991909116179052920194855250604051938490038101842060060180546001810182556000918252908290200180546001600160a01b031916331790558551859460099450879350918291908401908083835b602083106122bc5780518252601f19909201916020918201910161229d565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520336000908152600790910183528181209690965584820187905280855287519085015286517fa07d09c876e2b0cba5774aa7fee399e70054cf962d63558fa44dbdb08a043e03958895889550935083926060840192908701918190849084905b83811015612360578181015183820152602001612348565b50505050905090810190601f16801561238d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123e057805160ff191683800117855561240d565b8280016001018555821561240d579182015b8281111561240d5782518255916020019190600101906123f2565b50612419929150612457565b5090565b82805482825590600052602060002090810192821561240d579160200282018281111561240d5782518255916020019190600101906123f2565b61097e91905b80821115612419576000815560010161245d56fea165627a7a723058207500dcbb25c9cf72b1d661bd8bc2e64e734b57c78b0780877a8353e7321b211a0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_MAXPACKAMOUNT = "maxPackAmount";

    public static final String FUNC_MINPACKAMOUNT = "minPackAmount";

    public static final String FUNC_HUNTING = "hunting";

    public static final String FUNC_MYTOKEN = "mytoken";

    public static final String FUNC_NUMBEROFPLAYERS = "numberOfPlayers";

    public static final String FUNC_LIMIT_AMOUNT_OF_PACK = "LIMIT_AMOUNT_OF_PACK";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_GETTOKENINFO = "getTokenInfo";

    public static final String FUNC_TOLL = "toll";

    public static final String FUNC_GETPLAYERINFO = "getPlayerInfo";

    public static final String FUNC_TOTALPACKAMOUNTS = "totalPackAmounts";

    public static final String FUNC_MINPACKCOUNT = "minPackCount";

    public static final String FUNC_WITHDRAWBALANCE = "withdrawBalance";

    public static final String FUNC_PLAYERS = "players";

    public static final String FUNC_CHECKHUNTEREXISTS = "checkHunterExists";

    public static final String FUNC_GETPACKINFO = "getPackInfo";

    public static final String FUNC_MAXPACKCOUNT = "maxPackCount";

    public static final Event REDPACKCREATED_EVENT = new Event("redpackCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event REDPACKWITHDRAW_EVENT = new Event("redpackWithdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REDPACKGRABBED_EVENT = new Event("redpackGrabbed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected RedpackSol(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RedpackSol(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RedpackSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RedpackSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> maxPackAmount() {
        final Function function = new Function(FUNC_MAXPACKAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minPackAmount() {
        final Function function = new Function(FUNC_MINPACKAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> hunting(String id, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_HUNTING,
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> mytoken() {
        final Function function = new Function(FUNC_MYTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> numberOfPlayers() {
        final Function function = new Function(FUNC_NUMBEROFPLAYERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> LIMIT_AMOUNT_OF_PACK() {
        final Function function = new Function(FUNC_LIMIT_AMOUNT_OF_PACK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, String, String>> getTokenInfo() {
        final Function function = new Function(FUNC_GETTOKENINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, String>>(
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> toll(BigInteger count, BigInteger value, String id, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_TOLL,
                Arrays.<Type>asList(new Uint256(count),
                new Uint256(value),
                new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, List<String>>> getPlayerInfo() {
        final Function function = new Function(FUNC_GETPLAYERINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, List<String>>>(
                new Callable<Tuple3<BigInteger, BigInteger, List<String>>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, List<String>>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                convertToNative((List<Address>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> totalPackAmounts() {
        final Function function = new Function(FUNC_TOTALPACKAMOUNTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minPackCount() {
        final Function function = new Function(FUNC_MINPACKCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawBalance(String id) {
        final Function function = new Function(
                FUNC_WITHDRAWBALANCE,
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> players(BigInteger param0) {
        final Function function = new Function(FUNC_PLAYERS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> checkHunterExists(String _id, String _hunter) {
        final Function function = new Function(FUNC_CHECKHUNTEREXISTS,
                Arrays.<Type>asList(new Utf8String(_id),
                new Address(_hunter)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple5<BigInteger, BigInteger, BigInteger, List<String>, List<BigInteger>>> getPackInfo(String id) {
        final Function function = new Function(FUNC_GETPACKINFO,
                Arrays.<Type>asList(new Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple5<BigInteger, BigInteger, BigInteger, List<String>, List<BigInteger>>>(
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, List<String>, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Address>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> maxPackCount() {
        final Function function = new Function(FUNC_MAXPACKCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<RedpackCreatedEventResponse> getRedpackCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REDPACKCREATED_EVENT, transactionReceipt);
        ArrayList<RedpackCreatedEventResponse> responses = new ArrayList<RedpackCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RedpackCreatedEventResponse typedResponse = new RedpackCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RedpackCreatedEventResponse> redpackCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RedpackCreatedEventResponse>() {
            @Override
            public RedpackCreatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REDPACKCREATED_EVENT, log);
                RedpackCreatedEventResponse typedResponse = new RedpackCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RedpackCreatedEventResponse> redpackCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REDPACKCREATED_EVENT));
        return redpackCreatedEventFlowable(filter);
    }

    public List<RedpackWithdrawEventResponse> getRedpackWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REDPACKWITHDRAW_EVENT, transactionReceipt);
        ArrayList<RedpackWithdrawEventResponse> responses = new ArrayList<RedpackWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RedpackWithdrawEventResponse typedResponse = new RedpackWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RedpackWithdrawEventResponse> redpackWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RedpackWithdrawEventResponse>() {
            @Override
            public RedpackWithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REDPACKWITHDRAW_EVENT, log);
                RedpackWithdrawEventResponse typedResponse = new RedpackWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RedpackWithdrawEventResponse> redpackWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REDPACKWITHDRAW_EVENT));
        return redpackWithdrawEventFlowable(filter);
    }

    public List<RedpackGrabbedEventResponse> getRedpackGrabbedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REDPACKGRABBED_EVENT, transactionReceipt);
        ArrayList<RedpackGrabbedEventResponse> responses = new ArrayList<RedpackGrabbedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RedpackGrabbedEventResponse typedResponse = new RedpackGrabbedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RedpackGrabbedEventResponse> redpackGrabbedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RedpackGrabbedEventResponse>() {
            @Override
            public RedpackGrabbedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REDPACKGRABBED_EVENT, log);
                RedpackGrabbedEventResponse typedResponse = new RedpackGrabbedEventResponse();
                typedResponse.log = log;
                typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RedpackGrabbedEventResponse> redpackGrabbedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REDPACKGRABBED_EVENT));
        return redpackGrabbedEventFlowable(filter);
    }

    @Deprecated
    public static RedpackSol load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RedpackSol(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RedpackSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RedpackSol(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RedpackSol load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RedpackSol(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RedpackSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RedpackSol(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RedpackSol> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token)));
        return deployRemoteCall(RedpackSol.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<RedpackSol> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token)));
        return deployRemoteCall(RedpackSol.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RedpackSol> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token)));
        return deployRemoteCall(RedpackSol.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RedpackSol> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token)));
        return deployRemoteCall(RedpackSol.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class RedpackCreatedEventResponse {
        public Log log;

        public String id;
    }

    public static class RedpackWithdrawEventResponse {
        public Log log;

        public String id;

        public BigInteger amount;
    }

    public static class RedpackGrabbedEventResponse {
        public Log log;

        public String _id;

        public BigInteger amount;
    }
}
