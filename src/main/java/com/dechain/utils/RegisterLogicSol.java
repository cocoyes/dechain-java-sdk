package com.dechain.utils;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class RegisterLogicSol extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDORCHANGENFT = "addOrChangeNFT";

    public static final String FUNC_ADDTOKEN = "addToken";

    public static final String FUNC_BUSINESSMAP = "businessMap";

    public static final String FUNC_BUSINESSWALLETMAP = "businessWalletMap";

    public static final String FUNC_CHANGEBUSINESSSTATUS = "changeBusinessStatus";

    public static final String FUNC_CHANGEFEE = "changeFee";

    public static final String FUNC_CHANGEMINFEE = "changeMinFee";

    public static final String FUNC_CHANGETOKENCTYPE = "changeTokenCtype";

    public static final String FUNC_CHANGETOKENSORT = "changeTokenSort";

    public static final String FUNC_CHANGEWALLETADDRESS = "changeWalletAddress";

    public static final String FUNC_CREATENFT = "createNFT";

    public static final String FUNC_CREATETOKEN = "createToken";

    public static final String FUNC_FUNDSORDER = "fundsOrder";

    public static final String FUNC_GETAPPBALANCE = "getAppBalance";

    public static final String FUNC_GETBASEINFO = "getBaseInfo";

    public static final String FUNC_GETNFTINFO = "getNFTInfo";

    public static final String FUNC_GETNFTLIST = "getNFTList";

    public static final String FUNC_GETPAYMAP = "getPayMap";

    public static final String FUNC_GETREDMAP = "getRedMap";

    public static final String FUNC_GETTOKENINFO = "getTokenInfo";

    public static final String FUNC_GETTOKENLIST = "getTokenList";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LOCKTOKEN = "lockToken";

    public static final String FUNC_MAPPERPAYCONTRACT = "mapperPayContract";

    public static final String FUNC_MAPPERREDCONTRACT = "mapperRedContract";

    public static final String FUNC_MINFEE = "minFee";

    public static final String FUNC_NFTMARKETS = "nftMarkets";

    public static final String FUNC_NFTPUBLISHFEE = "nftPublishFee";

    public static final String FUNC_NFTTOKENMAP = "nftTokenMap";

    public static final String FUNC_ORDERINFOMAP = "orderInfoMap";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYORDER = "payOrder";

    public static final String FUNC_PAYTOKENMAP = "payTokenMap";

    public static final String FUNC_REDPACKTOKENMAP = "redPackTokenMap";

    public static final String FUNC_REGISTERBUSINESS = "registerBusiness";

    public static final String FUNC_REGISTERPAYFEE = "registerPayFee";

    public static final String FUNC_REGISTERREDFEE = "registerRedFee";

    public static final String FUNC_REGISTERTOKENFEE = "registerTokenFee";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SYMBOLTOKENINFO = "symbolTokenInfo";

    public static final String FUNC_TOKENADDRESS = "tokenAddress";

    public static final String FUNC_TOKENINFO = "tokenInfo";

    public static final String FUNC_TOKENS = "tokens";

    public static final String FUNC_TOTAL = "total";

    public static final String FUNC_TOTALFEEMAP = "totalFeeMap";

    public static final String FUNC_TRANSFERMAIN = "transferMain";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENS = "transferTokens";

    public static final String FUNC_UNLOCKTOKEN = "unlockToken";

    public static final String FUNC_UPDATENFTUSED = "updateNFTUsed";

    public static final String FUNC_UPDATETOKENICON = "updateTokenIcon";

    public static final String FUNC_UPDATETOKENNAME = "updateTokenName";

    public static final String FUNC_UPDATETOKENSORT = "updateTokenSort";

    public static final String FUNC_UPDATETOKENSYMBOL = "updateTokenSymbol";

    public static final String FUNC_WIDBUSINESS = "widBusiness";

    public static final String FUNC_WITHDRAWBALANCE = "withdrawBalance";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event FUNDSORDEREVENT_EVENT = new Event("fundsOrderEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PAYORDEREVENT_EVENT = new Event("payOrderEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event WIDBUSINESSEVENT_EVENT = new Event("widBusinessEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    @Deprecated
    protected RegisterLogicSol(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RegisterLogicSol(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RegisterLogicSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RegisterLogicSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<FundsOrderEventEventResponse> getFundsOrderEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDSORDEREVENT_EVENT, transactionReceipt);
        ArrayList<FundsOrderEventEventResponse> responses = new ArrayList<FundsOrderEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FundsOrderEventEventResponse typedResponse = new FundsOrderEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundsOrderEventEventResponse> fundsOrderEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FundsOrderEventEventResponse>() {
            @Override
            public FundsOrderEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDSORDEREVENT_EVENT, log);
                FundsOrderEventEventResponse typedResponse = new FundsOrderEventEventResponse();
                typedResponse.log = log;
                typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundsOrderEventEventResponse> fundsOrderEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDSORDEREVENT_EVENT));
        return fundsOrderEventEventFlowable(filter);
    }

    public List<PayOrderEventEventResponse> getPayOrderEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAYORDEREVENT_EVENT, transactionReceipt);
        ArrayList<PayOrderEventEventResponse> responses = new ArrayList<PayOrderEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PayOrderEventEventResponse typedResponse = new PayOrderEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayOrderEventEventResponse> payOrderEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PayOrderEventEventResponse>() {
            @Override
            public PayOrderEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAYORDEREVENT_EVENT, log);
                PayOrderEventEventResponse typedResponse = new PayOrderEventEventResponse();
                typedResponse.log = log;
                typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayOrderEventEventResponse> payOrderEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYORDEREVENT_EVENT));
        return payOrderEventEventFlowable(filter);
    }

    public List<WidBusinessEventEventResponse> getWidBusinessEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WIDBUSINESSEVENT_EVENT, transactionReceipt);
        ArrayList<WidBusinessEventEventResponse> responses = new ArrayList<WidBusinessEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WidBusinessEventEventResponse typedResponse = new WidBusinessEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._tokens = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WidBusinessEventEventResponse> widBusinessEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WidBusinessEventEventResponse>() {
            @Override
            public WidBusinessEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WIDBUSINESSEVENT_EVENT, log);
                WidBusinessEventEventResponse typedResponse = new WidBusinessEventEventResponse();
                typedResponse.log = log;
                typedResponse._appId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._tokens = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WidBusinessEventEventResponse> widBusinessEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WIDBUSINESSEVENT_EVENT));
        return widBusinessEventEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addOrChangeNFT(String _contractAddr, String _img, String _title, String _content) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDORCHANGENFT,
                Arrays.<Type>asList(new Address(_contractAddr),
                new Utf8String(_img),
                new Utf8String(_title),
                new Utf8String(_content)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addToken(String _token, String _symbol, String _icon, String _tokenName, BigInteger _len, BigInteger _red, BigInteger _pay, String _raddr, String _paddr, BigInteger _ctype) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOKEN,
                Arrays.<Type>asList(new Address(_token),
                new Utf8String(_symbol),
                new Utf8String(_icon),
                new Utf8String(_tokenName),
                new Uint256(_len),
                new Uint256(_red),
                new Uint256(_pay),
                new Address(_raddr),
                new Address(_paddr),
                new Uint256(_ctype)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> businessMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUSINESSMAP,
                Arrays.<Type>asList(new Utf8String(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> businessWalletMap(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUSINESSWALLETMAP,
                Arrays.<Type>asList(new Utf8String(param0),
                new Address(param1)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeBusinessStatus(String _appId, BigInteger _status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEBUSINESSSTATUS,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Uint256(_status)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeFee(BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEFEE,
                Arrays.<Type>asList(new Uint256(_registerTokenFee),
                new Uint256(_registerRedFee),
                new Uint256(_registerPayFee),
                new Uint256(_nftPublishFee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeMinFee(BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEMINFEE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeTokenCtype(String _token, BigInteger _ctype) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGETOKENCTYPE,
                Arrays.<Type>asList(new Address(_token),
                new Uint256(_ctype)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeTokenSort(String _token, BigInteger _sort) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGETOKENSORT,
                Arrays.<Type>asList(new Address(_token),
                new Uint256(_sort)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeWalletAddress(String _appId, String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEWALLETADDRESS,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createNFT(String _contractAddr, String _img, String _title, String _content) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATENFT,
                Arrays.<Type>asList(new Address(_contractAddr),
                new Utf8String(_img),
                new Utf8String(_title),
                new Utf8String(_content)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createToken(String _token, String _symbol, String _icon, String _tokenName, BigInteger _len, BigInteger _ctype) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATETOKEN,
                Arrays.<Type>asList(new Address(_token),
                new Utf8String(_symbol),
                new Utf8String(_icon),
                new Utf8String(_tokenName),
                new Uint256(_len),
                new Uint256(_ctype)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> fundsOrder(String _appId, String oid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUNDSORDER,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Utf8String(oid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAppBalance(String _appId, String _token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETAPPBALANCE,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Address(_token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getBaseInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETBASEINFO,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getNFTInfo(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETNFTINFO,
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getNFTList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETNFTLIST,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getPayMap(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETPAYMAP,
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getRedMap(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETREDMAP,
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTokenInfo(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETTOKENINFO,
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTokenList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETTOKENLIST,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockToken(String _token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKTOKEN,
                Arrays.<Type>asList(new Address(_token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mapperPayContract(String _payAddr, String _tokenAddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAPPERPAYCONTRACT,
                Arrays.<Type>asList(new Address(_payAddr),
                new Address(_tokenAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mapperRedContract(String _redAddr, String _tokenAddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAPPERREDCONTRACT,
                Arrays.<Type>asList(new Address(_redAddr),
                new Address(_tokenAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> minFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINFEE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> nftMarkets(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NFTMARKETS,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> nftPublishFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NFTPUBLISHFEE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> nftTokenMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NFTTOKENMAP,
                Arrays.<Type>asList(new Address(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> orderInfoMap(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ORDERINFOMAP,
                Arrays.<Type>asList(new Utf8String(param0),
                new Utf8String(param1)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> payOrder(String _appId, String _token, BigInteger _amount, String oid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAYORDER,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Address(_token),
                new Uint256(_amount),
                new Utf8String(oid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> payTokenMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAYTOKENMAP,
                Arrays.<Type>asList(new Address(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> redPackTokenMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDPACKTOKENMAP,
                Arrays.<Type>asList(new Address(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerBusiness(String _appId, String _name) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERBUSINESS,
                Arrays.<Type>asList(new Utf8String(_appId),
                new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerPayFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERPAYFEE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerRedFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERREDFEE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerTokenFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERTOKENFEE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> symbolTokenInfo(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOLTOKENINFO,
                Arrays.<Type>asList(new Utf8String(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenAddress(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENADDRESS,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenInfo(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENINFO,
                Arrays.<Type>asList(new Address(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENS,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> total() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTAL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalFeeMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALFEEMAP,
                Arrays.<Type>asList(new Address(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferMain(List<String> _tos, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERMAIN,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_tos, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferTokens(String caddress, List<String> _tos, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERTOKENS,
                Arrays.<Type>asList(new Address(caddress),
                new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_tos, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unlockToken(String _token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCKTOKEN,
                Arrays.<Type>asList(new Address(_token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateNFTUsed(String _nftAddr, Boolean _state) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATENFTUSED,
                Arrays.<Type>asList(new Address(_nftAddr),
                new org.web3j.abi.datatypes.Bool(_state)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateTokenIcon(List<String> _addrs, List<String> icons) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETOKENICON,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(icons, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateTokenName(List<String> _addrs, List<String> names) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETOKENNAME,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(names, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateTokenSort(List<String> _addrs, List<BigInteger> sorts) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETOKENSORT,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(sorts, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateTokenSymbol(List<String> _addrs, List<String> symbols) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETOKENSYMBOL,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_addrs, Address.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(symbols, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> widBusiness(String _appId, List<String> _tokens, List<BigInteger> _feeRates) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WIDBUSINESS,
                Arrays.<Type>asList(new Utf8String(_appId),
                new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_tokens, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_feeRates, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawBalance(String _to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWBALANCE,
                Arrays.<Type>asList(new Address(_to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static RegisterLogicSol load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RegisterLogicSol(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RegisterLogicSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RegisterLogicSol(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RegisterLogicSol load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RegisterLogicSol(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RegisterLogicSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RegisterLogicSol(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RegisterLogicSol> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee),
                new Uint256(_registerRedFee),
                new Uint256(_registerPayFee),
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterLogicSol.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<RegisterLogicSol> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee),
                new Uint256(_registerRedFee),
                new Uint256(_registerPayFee),
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterLogicSol.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RegisterLogicSol> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee),
                new Uint256(_registerRedFee),
                new Uint256(_registerPayFee),
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterLogicSol.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RegisterLogicSol> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _registerTokenFee, BigInteger _registerRedFee, BigInteger _registerPayFee, BigInteger _nftPublishFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(_registerTokenFee),
                new Uint256(_registerRedFee),
                new Uint256(_registerPayFee),
                new Uint256(_nftPublishFee)));
        return deployRemoteCall(RegisterLogicSol.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class FundsOrderEventEventResponse {
        public Log log;

        public String _appId;

        public String _token;

        public BigInteger _amount;

        public String oid;
    }

    public static class PayOrderEventEventResponse {
        public Log log;

        public String _appId;

        public String _token;

        public BigInteger _amount;

        public String oid;
    }

    public static class WidBusinessEventEventResponse {
        public Log log;

        public String _appId;

        public List<String> _tokens;

        public List<BigInteger> _amounts;
    }
}
