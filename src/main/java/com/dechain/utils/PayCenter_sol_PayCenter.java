package com.dechain.utils;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class PayCenter_sol_PayCenter extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_OPENSTATUS = "openStatus";

    public static final String FUNC_WITHDRAWBALANCE = "withdrawBalance";

    public static final String FUNC_FINDBUSINESS = "findBusiness";

    public static final String FUNC_TOTALFEE = "totalFee";

    public static final String FUNC_TOTAL = "total";

    public static final String FUNC_CHANGEKEEPBALANCE = "changeKeepBalance";

    public static final String FUNC_WITHDRAWFROMBALANCE = "withdrawFromBalance";

    public static final String FUNC_ADDBUSINESS = "addBusiness";

    public static final String FUNC_BASEKEEPAMOUNT = "baseKeepAmount";

    public static final String FUNC_BASEFEE = "baseFee";

    public static final String FUNC_QUITBUSINESS = "quitBusiness";

    public static final String FUNC_FINDORDER = "findOrder";

    public static final String FUNC_BUSINESSLIST = "businessList";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYORDER = "payOrder";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_CLEARORDER = "clearOrder";

    public static final String FUNC_GETPAYBASEINFO = "getPayBaseInfo";

    public static final String FUNC_REFUNDSBALANCE = "refundsBalance";

    public static final String FUNC_CANCELORDER = "cancelOrder";

    public static final String FUNC_DEALCONTRACTSTATUS = "dealContractStatus";

    public static final String FUNC_CHANGEBUSINESS = "changeBusiness";

    public static final String FUNC_CHANGEBUSINESSFEE = "changeBusinessFee";

    public static final String FUNC_CREATEBUSINESS = "createBusiness";

    public static final String FUNC_GETALLBUSINESS = "getAllBusiness";

    public static final String FUNC_CHANGEBASEFEE = "changeBaseFee";

    public static final Event CREATEBUSINESSEVENT_EVENT = new Event("createBusinessEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event QUITBUSINESSEVENT_EVENT = new Event("quitBusinessEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CREATEORDEREVENT_EVENT = new Event("createOrderEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event ORDERPAYEDEVENT_EVENT = new Event("orderPayedEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event ORDERREFUNDEDEVENT_EVENT = new Event("orderRefundedEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event ORDERCANCELEDEVENT_EVENT = new Event("orderCanceledEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event WITHDRAWFROMBALANCEEVENT_EVENT = new Event("withdrawFromBalanceEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected PayCenter_sol_PayCenter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PayCenter_sol_PayCenter(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PayCenter_sol_PayCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PayCenter_sol_PayCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> openStatus() {
        final Function function = new Function(FUNC_OPENSTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> withdrawBalance(String toAddress, BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWBALANCE,
                Arrays.<Type>asList(new Address(toAddress),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>> findBusiness(String business) {
        final Function function = new Function(FUNC_FINDBUSINESS,
                Arrays.<Type>asList(new Address(business)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (Boolean) results.get(9).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> totalFee() {
        final Function function = new Function(FUNC_TOTALFEE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> total() {
        final Function function = new Function(FUNC_TOTAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeKeepBalance(BigInteger amount) {
        final Function function = new Function(
                FUNC_CHANGEKEEPBALANCE,
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawFromBalance(BigInteger balance, String rec) {
        final Function function = new Function(
                FUNC_WITHDRAWFROMBALANCE,
                Arrays.<Type>asList(new Uint256(balance),
                new Address(rec)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addBusiness(String icon, String name, String baddr) {
        final Function function = new Function(
                FUNC_ADDBUSINESS,
                Arrays.<Type>asList(new Utf8String(icon),
                new Utf8String(name),
                new Address(baddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> baseKeepAmount() {
        final Function function = new Function(FUNC_BASEKEEPAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> baseFee() {
        final Function function = new Function(FUNC_BASEFEE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> quitBusiness() {
        final Function function = new Function(
                FUNC_QUITBUSINESS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, Boolean, String>> findOrder(String orderId) {
        final Function function = new Function(FUNC_FINDORDER,
                Arrays.<Type>asList(new Utf8String(orderId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, Boolean, String>>(
                new Callable<Tuple7<String, BigInteger, BigInteger, String, BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, String, BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, String, BigInteger, Boolean, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (Boolean) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>> businessList(BigInteger param0) {
        final Function function = new Function(FUNC_BUSINESSLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (Boolean) results.get(9).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> payOrder(String oid) {
        final Function function = new Function(
                FUNC_PAYORDER,
                Arrays.<Type>asList(new Utf8String(oid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createOrder(String oid, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREATEORDER,
                Arrays.<Type>asList(new Utf8String(oid),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> clearOrder() {
        final Function function = new Function(
                FUNC_CLEARORDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>> getPayBaseInfo() {
        final Function function = new Function(FUNC_GETPAYBASEINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> refundsBalance(String oid) {
        final Function function = new Function(
                FUNC_REFUNDSBALANCE,
                Arrays.<Type>asList(new Utf8String(oid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelOrder(String oid) {
        final Function function = new Function(
                FUNC_CANCELORDER,
                Arrays.<Type>asList(new Utf8String(oid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> dealContractStatus() {
        final Function function = new Function(
                FUNC_DEALCONTRACTSTATUS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeBusiness(String businessAddress) {
        final Function function = new Function(
                FUNC_CHANGEBUSINESS,
                Arrays.<Type>asList(new Address(businessAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeBusinessFee(String business, BigInteger fee) {
        final Function function = new Function(
                FUNC_CHANGEBUSINESSFEE,
                Arrays.<Type>asList(new Address(business),
                new Uint256(fee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createBusiness(BigInteger keepBalance, String icon, String name) {
        final Function function = new Function(
                FUNC_CREATEBUSINESS,
                Arrays.<Type>asList(new Uint256(keepBalance),
                new Utf8String(icon),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getAllBusiness() {
        final Function function = new Function(FUNC_GETALLBUSINESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple8<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple8<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple8<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Utf8String>) results.get(1).getValue()),
                                convertToNative((List<Utf8String>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()),
                                convertToNative((List<Uint256>) results.get(5).getValue()),
                                convertToNative((List<Uint256>) results.get(6).getValue()),
                                convertToNative((List<Uint256>) results.get(7).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> changeBaseFee(BigInteger fee) {
        final Function function = new Function(
                FUNC_CHANGEBASEFEE,
                Arrays.<Type>asList(new Uint256(fee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<CreateBusinessEventEventResponse> getCreateBusinessEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEBUSINESSEVENT_EVENT, transactionReceipt);
        ArrayList<CreateBusinessEventEventResponse> responses = new ArrayList<CreateBusinessEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateBusinessEventEventResponse typedResponse = new CreateBusinessEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateBusinessEventEventResponse> createBusinessEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateBusinessEventEventResponse>() {
            @Override
            public CreateBusinessEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEBUSINESSEVENT_EVENT, log);
                CreateBusinessEventEventResponse typedResponse = new CreateBusinessEventEventResponse();
                typedResponse.log = log;
                typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateBusinessEventEventResponse> createBusinessEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEBUSINESSEVENT_EVENT));
        return createBusinessEventEventFlowable(filter);
    }

    public List<QuitBusinessEventEventResponse> getQuitBusinessEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(QUITBUSINESSEVENT_EVENT, transactionReceipt);
        ArrayList<QuitBusinessEventEventResponse> responses = new ArrayList<QuitBusinessEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            QuitBusinessEventEventResponse typedResponse = new QuitBusinessEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QuitBusinessEventEventResponse> quitBusinessEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, QuitBusinessEventEventResponse>() {
            @Override
            public QuitBusinessEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(QUITBUSINESSEVENT_EVENT, log);
                QuitBusinessEventEventResponse typedResponse = new QuitBusinessEventEventResponse();
                typedResponse.log = log;
                typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QuitBusinessEventEventResponse> quitBusinessEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUITBUSINESSEVENT_EVENT));
        return quitBusinessEventEventFlowable(filter);
    }

    public List<CreateOrderEventEventResponse> getCreateOrderEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEORDEREVENT_EVENT, transactionReceipt);
        ArrayList<CreateOrderEventEventResponse> responses = new ArrayList<CreateOrderEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateOrderEventEventResponse typedResponse = new CreateOrderEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateOrderEventEventResponse> createOrderEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateOrderEventEventResponse>() {
            @Override
            public CreateOrderEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEORDEREVENT_EVENT, log);
                CreateOrderEventEventResponse typedResponse = new CreateOrderEventEventResponse();
                typedResponse.log = log;
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateOrderEventEventResponse> createOrderEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEORDEREVENT_EVENT));
        return createOrderEventEventFlowable(filter);
    }

    public List<OrderPayedEventEventResponse> getOrderPayedEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERPAYEDEVENT_EVENT, transactionReceipt);
        ArrayList<OrderPayedEventEventResponse> responses = new ArrayList<OrderPayedEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderPayedEventEventResponse typedResponse = new OrderPayedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderPayedEventEventResponse> orderPayedEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderPayedEventEventResponse>() {
            @Override
            public OrderPayedEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERPAYEDEVENT_EVENT, log);
                OrderPayedEventEventResponse typedResponse = new OrderPayedEventEventResponse();
                typedResponse.log = log;
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderPayedEventEventResponse> orderPayedEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERPAYEDEVENT_EVENT));
        return orderPayedEventEventFlowable(filter);
    }

    public List<OrderRefundedEventEventResponse> getOrderRefundedEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERREFUNDEDEVENT_EVENT, transactionReceipt);
        ArrayList<OrderRefundedEventEventResponse> responses = new ArrayList<OrderRefundedEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderRefundedEventEventResponse typedResponse = new OrderRefundedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderRefundedEventEventResponse> orderRefundedEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderRefundedEventEventResponse>() {
            @Override
            public OrderRefundedEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERREFUNDEDEVENT_EVENT, log);
                OrderRefundedEventEventResponse typedResponse = new OrderRefundedEventEventResponse();
                typedResponse.log = log;
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderRefundedEventEventResponse> orderRefundedEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERREFUNDEDEVENT_EVENT));
        return orderRefundedEventEventFlowable(filter);
    }

    public List<OrderCanceledEventEventResponse> getOrderCanceledEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERCANCELEDEVENT_EVENT, transactionReceipt);
        ArrayList<OrderCanceledEventEventResponse> responses = new ArrayList<OrderCanceledEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderCanceledEventEventResponse typedResponse = new OrderCanceledEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderCanceledEventEventResponse> orderCanceledEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderCanceledEventEventResponse>() {
            @Override
            public OrderCanceledEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERCANCELEDEVENT_EVENT, log);
                OrderCanceledEventEventResponse typedResponse = new OrderCanceledEventEventResponse();
                typedResponse.log = log;
                typedResponse.oid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderCanceledEventEventResponse> orderCanceledEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERCANCELEDEVENT_EVENT));
        return orderCanceledEventEventFlowable(filter);
    }

    public List<WithdrawFromBalanceEventEventResponse> getWithdrawFromBalanceEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWFROMBALANCEEVENT_EVENT, transactionReceipt);
        ArrayList<WithdrawFromBalanceEventEventResponse> responses = new ArrayList<WithdrawFromBalanceEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawFromBalanceEventEventResponse typedResponse = new WithdrawFromBalanceEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawFromBalanceEventEventResponse> withdrawFromBalanceEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawFromBalanceEventEventResponse>() {
            @Override
            public WithdrawFromBalanceEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWFROMBALANCEEVENT_EVENT, log);
                WithdrawFromBalanceEventEventResponse typedResponse = new WithdrawFromBalanceEventEventResponse();
                typedResponse.log = log;
                typedResponse.businessAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawFromBalanceEventEventResponse> withdrawFromBalanceEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWFROMBALANCEEVENT_EVENT));
        return withdrawFromBalanceEventEventFlowable(filter);
    }

    @Deprecated
    public static PayCenter_sol_PayCenter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PayCenter_sol_PayCenter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PayCenter_sol_PayCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PayCenter_sol_PayCenter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PayCenter_sol_PayCenter load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PayCenter_sol_PayCenter(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PayCenter_sol_PayCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PayCenter_sol_PayCenter(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PayCenter_sol_PayCenter> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _token, BigInteger keepAmount, BigInteger _baseFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token),
                new Uint256(keepAmount),
                new Uint256(_baseFee)));
        return deployRemoteCall(PayCenter_sol_PayCenter.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PayCenter_sol_PayCenter> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _token, BigInteger keepAmount, BigInteger _baseFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token),
                new Uint256(keepAmount),
                new Uint256(_baseFee)));
        return deployRemoteCall(PayCenter_sol_PayCenter.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PayCenter_sol_PayCenter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _token, BigInteger keepAmount, BigInteger _baseFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token),
                new Uint256(keepAmount),
                new Uint256(_baseFee)));
        return deployRemoteCall(PayCenter_sol_PayCenter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PayCenter_sol_PayCenter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _token, BigInteger keepAmount, BigInteger _baseFee) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_token),
                new Uint256(keepAmount),
                new Uint256(_baseFee)));
        return deployRemoteCall(PayCenter_sol_PayCenter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CreateBusinessEventEventResponse {
        public Log log;

        public String businessAddress;
    }

    public static class QuitBusinessEventEventResponse {
        public Log log;

        public String businessAddress;
    }

    public static class CreateOrderEventEventResponse {
        public Log log;

        public String oid;
    }

    public static class OrderPayedEventEventResponse {
        public Log log;

        public String oid;
    }

    public static class OrderRefundedEventEventResponse {
        public Log log;

        public String oid;
    }

    public static class OrderCanceledEventEventResponse {
        public Log log;

        public String oid;
    }

    public static class WithdrawFromBalanceEventEventResponse {
        public Log log;

        public String businessAddress;
    }
}
